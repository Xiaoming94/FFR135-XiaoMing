# Author: Henry Yang

import numpy as np
from hopfieldnetwork import HopField
import random as r

def feedUpdateConverge(net,input):
    states = input
    converged = False
    bitts = input.size
    while not converged:
        oldStates = states.copy()
        for i in range(bitts):
            states[i] = net.feedAsync(states,i)
        
        diff = np.sum(states - oldStates)
        converged = diff == 0
    
    return states

def findMatched(states,inputs):
    i = 1
    for p in inputs :
        if np.sum(p - states) == 0:
            return i
        elif np.sum(p + states) == 0:
            return -i
        i += 1
    return i 
        

x1=np.array([-1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
             -1, -1, -1, 1, 1, 1, 1, -1, -1, -1,
             -1, -1, 1, 1, 1, 1, 1, 1, -1, -1,
             -1, 1, 1, 1, -1, -1, 1, 1, 1, -1,
             -1, 1, 1, 1, -1, -1, 1, 1, 1, -1,
             -1, 1, 1, 1, -1, -1, 1, 1, 1, -1,
             -1, 1, 1, 1, -1, -1, 1, 1, 1, -1,
             -1, 1, 1, 1, -1, -1, 1, 1, 1, -1,
             -1, 1, 1, 1, -1, -1, 1, 1, 1, -1,
             -1, 1, 1, 1, -1, -1, 1, 1, 1, -1,
             -1, 1, 1, 1, -1, -1, 1, 1, 1, -1,
             -1, 1, 1, 1, -1, -1, 1, 1, 1, -1,
             -1, 1, 1, 1, -1, -1, 1, 1, 1, -1,
             -1, -1, 1, 1, 1, 1, 1, 1, -1, -1,
             -1, -1, -1, 1, 1, 1, 1, -1, -1, -1,
             -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
            ])
x2=np.array([
             -1, -1, -1, 1, 1, 1, 1, -1, -1, -1,
             -1, -1, -1, 1, 1, 1, 1, -1, -1, -1,
             -1, -1, -1, 1, 1, 1, 1, -1, -1, -1,
             -1, -1, -1, 1, 1, 1, 1, -1, -1, -1,
             -1, -1, -1, 1, 1, 1, 1, -1, -1, -1,
             -1, -1, -1, 1, 1, 1, 1, -1, -1, -1,
             -1, -1, -1, 1, 1, 1, 1, -1, -1, -1,
             -1, -1, -1, 1, 1, 1, 1, -1, -1, -1,
             -1, -1, -1, 1, 1, 1, 1, -1, -1, -1,
             -1, -1, -1, 1, 1, 1, 1, -1, -1, -1,
             -1, -1, -1, 1, 1, 1, 1, -1, -1, -1,
             -1, -1, -1, 1, 1, 1, 1, -1, -1, -1,
             -1, -1, -1, 1, 1, 1, 1, -1, -1, -1,
             -1, -1, -1, 1, 1, 1, 1, -1, -1, -1,
             -1, -1, -1, 1, 1, 1, 1, -1, -1, -1,
             -1, -1, -1, 1, 1, 1, 1, -1, -1, -1 ])

x3=np.array([
     1, 1, 1, 1, 1, 1, 1, 1, -1, -1,
     1, 1, 1, 1, 1, 1, 1, 1, -1, -1,
     -1, -1, -1, -1, -1, 1, 1, 1, -1, -1,
     -1, -1, -1, -1, -1, 1, 1, 1, -1, -1,
     -1, -1, -1, -1, -1, 1, 1, 1, -1, -1,
     -1, -1, -1, -1, -1, 1, 1, 1, -1, -1,
     -1, -1, -1, -1, -1, 1, 1, 1, -1, -1,
     1, 1, 1, 1, 1, 1, 1, 1, -1, -1,
     1, 1, 1, 1, 1, 1, 1, 1, -1, -1,
     1, 1, 1, -1, -1, -1, -1, -1, -1, -1,
     1, 1, 1, -1, -1, -1, -1, -1, -1, -1,
     1, 1, 1, -1, -1, -1, -1, -1, -1, -1,
     1, 1, 1, -1, -1, -1, -1, -1, -1, -1,
     1, 1, 1, -1, -1, -1, -1, -1, -1, -1,
     1, 1, 1, 1, 1, 1, 1, 1, -1, -1,
     1, 1, 1, 1, 1, 1, 1, 1, -1, -1 ])

x4=np.array([
     -1, -1, 1, 1, 1, 1, 1, 1, -1, -1,
     -1, -1, 1, 1, 1, 1, 1, 1, 1, -1,
     -1, -1, -1, -1, -1, -1, 1, 1, 1, -1,
     -1, -1, -1, -1, -1, -1, 1, 1, 1, -1,
     -1, -1, -1, -1, -1, -1, 1, 1, 1, -1,
     -1, -1, -1, -1, -1, -1, 1, 1, 1, -1,
     -1, -1, -1, -1, -1, -1, 1, 1, 1, -1,
     -1, -1, 1, 1, 1, 1, 1, 1, -1, -1,
     -1, -1, 1, 1, 1, 1, 1, 1, -1, -1,
     -1, -1, -1, -1, -1, -1, 1, 1, 1, -1,
     -1, -1, -1, -1, -1, -1, 1, 1, 1, -1,
     -1, -1, -1, -1, -1, -1, 1, 1, 1, -1,
     -1, -1, -1, -1, -1, -1, 1, 1, 1, -1,
     -1, -1, -1, -1, -1, -1, 1, 1, 1, -1,
     -1, -1, 1, 1, 1, 1, 1, 1, 1, -1,
     -1, -1, 1, 1, 1, 1, 1, 1, -1, -1
    ])

x5=np.array([
     -1, 1, 1, -1, -1, -1, -1, 1, 1, -1,
     -1, 1, 1, -1, -1, -1, -1, 1, 1, -1,
     -1, 1, 1, -1, -1, -1, -1, 1, 1, -1,
     -1, 1, 1, -1, -1, -1, -1, 1, 1, -1,
     -1, 1, 1, -1, -1, -1, -1, 1, 1, -1,
     -1, 1, 1, -1, -1, -1, -1, 1, 1, -1,
     -1, 1, 1, -1, -1, -1, -1, 1, 1, -1,
     -1, 1, 1, 1, 1, 1, 1, 1, 1, -1,
     -1, 1, 1, 1, 1, 1, 1, 1, 1, -1,
     -1, -1, -1, -1, -1, -1, -1, 1, 1, -1,
     -1, -1, -1, -1, -1, -1, -1, 1, 1, -1,
     -1, -1, -1, -1, -1, -1, -1, 1, 1, -1,
     -1, -1, -1, -1, -1, -1, -1, 1, 1, -1,
     -1, -1, -1, -1, -1, -1, -1, 1, 1, -1,
     -1, -1, -1, -1, -1, -1, -1, 1, 1, -1,
     -1, -1, -1, -1, -1, -1, -1, 1, 1, -1 ])

data = np.stack((x1,x2,x3,x4,x5))

input1 = np.array([
    1, 1, 1, 1, 1, 1, 1, 1, -1, -1, 
    1, 1, 1, 1, 1, 1, 1, 1, -1, -1, 
    -1, -1, -1, -1, -1, 1, 1, 1, -1, -1, 
    -1, -1, -1, -1, -1, 1, 1, 1, -1, -1, 
    -1, -1, -1, -1, -1, 1, 1, 1, -1, -1, 
    -1, -1, -1, -1, -1, 1, 1, 1, -1, -1, 
    -1, -1, -1, -1, -1, 1, 1, 1, -1, -1, 
    1, 1, 1, 1, 1, 1, 1, 1, -1, -1, 
    1, 1, 1, 1, 1, 1, 1, 1, -1, -1, 
    1, 1, 1, -1, -1, -1, -1, -1, -1, -1, 
    1, 1, 1, -1, -1, -1, -1, -1, -1, -1, 
    1, 1, 1, -1, -1, -1, -1, -1, -1, -1, 
    1, 1, 1, -1, -1, -1, -1, -1, -1, -1, 
    1, 1, 1, -1, -1, -1, -1, -1, -1, -1, 
    1, 1, 1, 1, 1, 1, 1, 1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, 1, 1]) 

input2 = np.array([[1, 1, -1, -1, -1, -1, -1, -1, 1, 1], [1, 1, -1, -1, -1, -1, -1, -1, -1, 1], [1, 1, 1, 1, 1, 1, -1, -1, -1, 1], [1, 1, 1, 1, 1, 1, -1, -1, -1, 1], [1, 1, 1, 1, 1, 1, -1, -1, -1, 1], [1, 1, 1, 1, 1, 1, -1, -1, -1, 1], [1, 1, 1, 1, 1, 1, -1, -1, -1, 1], [1, 1, -1, -1, -1, -1, -1, -1, 1, 1], [1, 1, -1, -1, -1, 1, 1, 1, -1, -1], [-1, -1, -1, -1, -1, -1, 1, 1, 1, -1], [-1, -1, -1, -1, -1, -1, 1, 1, 1, -1], [-1, -1, -1, -1, -1, -1, 1, 1, 1, -1], [-1, -1, -1, -1, -1, -1, 1, 1, 1, -1], [-1, -1, -1, -1, -1, -1, 1, 1, 1, -1], [-1, -1, 1, 1, 1, 1, 1, 1, 1, -1], [-1, -1, 1, 1, 1, 1, 1, 1, -1, -1]] ).flatten()

input3 = np.array([
    1, -1, -1, 1, 1, 1, 1, -1, -1, 1,
    1, -1, -1, 1, 1, 1, 1, -1, -1, 1,
    -1, 1, 1, -1, -1, -1, -1, 1, 1, -1,
    -1, 1, 1, -1, -1, -1, -1, 1, 1, -1,
    -1, 1, 1, -1, -1, -1, -1, 1, 1, -1,
    -1, 1, 1, -1, -1, -1, -1, 1, 1, -1,
    -1, 1, 1, -1, -1, -1, -1, 1, 1, -1,
    -1, 1, 1, 1, 1, 1, 1, 1, 1, -1,
    -1, 1, 1, 1, 1, 1, 1, 1, 1, -1,
    -1, -1, -1, -1, -1, -1, -1, 1, 1, -1,
    -1, -1, -1, -1, -1, -1, -1, 1, 1, -1,
    -1, -1, -1, -1, -1, -1, -1, 1, 1, -1,
    -1, -1, -1, -1, -1, -1, -1, 1, 1, -1,
    -1, -1, -1, -1, -1, -1, -1, 1, 1, -1,
    -1, -1, -1, -1, -1, -1, -1, 1, 1, -1,
    -1, -1, -1, -1, -1, -1, -1, 1, 1, -1]
)

inputs = [input1,input2,input3]

net = HopField(True,data)
for i in inputs :
    print(i.reshape(16,10))
    res = feedUpdateConverge(net,i)
    print("current input converges to:")
    print(res.reshape(16,10))
    pat = findMatched(res,data)
    print("Matching pattern : %s" % pat)

    print()
